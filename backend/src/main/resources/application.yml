server:
  port: 8082

spring:
  application:
    name: backend
---

my:
  admin_mail: ${ADMIN_EMAIL}
  admin_password: ${ADMIN_PASSWORD}

azure:
  account_key: ${ACCOUNT_KEY}
  account_name: ${ACCOUNT_NAME}
  connection_string: ${CONNECTION_STRING}
  container_name: ${CONTAINER_NAME}

management:
  tracing:
    enabled: false

spring:
  config:
    activate:
      on-profile: default
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 11MB
  data:
    redis:
      host: apfm-redis.redis.cache.windows.net
      port: 6380
      username: default
      password: ${REDIS_PASSWORD}
      ssl.enabled: true



  datasource:
    url: jdbc:mysql://apfm-mysql-server.mysql.database.azure.com:3306/apfm?useSSL=true&requireSSL=false&serverTimezone=UTC
    username: mysqladmin
    password: root1234!
    driver-class-name: com.mysql.cj.jdbc.Driver
    
#  h2:
#    console:
#      enabled: true
#      path: /h2-console
#      settings:
#        web-allow-others: true


  jpa:
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: true
    
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl

  mail:
    host: smtp.gmail.com
    port: 587
    protocol: smtp
    default-encoding: UTF-8
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

    auth-code-expiration-millis: 1800000

  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: backend
#<<< EDA / Topic Name
          destination: server
#>>> EDA / Topic Name
          contentType: application/json
        event-out:
#<<< EDA / Topic Name
          destination: server
#>>> EDA / Topic Name
          contentType: application/json
#  sql:
#    init:
#      mode: always
#      encoding: UTF-8

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

jwt:
  secret: ${SECRET_KEY}
  expiration: 3600000

app:
  fastapi:
    base-url: http://localhost:8080  # FastAPI 서버 주소

server:
  port: 8082

---

spring:
  config:
    activate:
      on-profile: docker

  data:
    redis:
      host: apfm-redis.redis.cache.windows.net
      port: 6380
      username: default
      password: ${REDIS_PASSWORD}
      ssl.enabled: true
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: backend
          destination: server
          contentType: application/json
        event-out:
          destination: server
          contentType: application/json


