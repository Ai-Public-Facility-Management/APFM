# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service

trigger:
- main

resources:
- repo: self

variables:
- name: dockerRegistryServiceConnection
  value: '05c23959-ace4-4487-a73b-d09fe638aff7'
- name: containerRegistry
  value: 'apfmrg.azurecr.io'
- name: imagePullSecret
  value: 'apfmrgf81e-auth'
- name: vmImageName
  value: 'ubuntu-latest'
- group: apfmk   # 🔹 DevOps Library 연결

stages:
# =========================
# Build Stage
# =========================
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build_Backend
    displayName: Build Backend
    pool:
      name: Default
    steps:
    - task: Docker@2
      displayName: Build and push Backend image
      inputs:
        command: buildAndPush
        repository: backend
        dockerfile: backend/Dockerfile
        buildContext: backend
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
          $(Build.BuildId)

  - job: Build_Frontend
    displayName: Build Frontend
    pool:
      name: Default
    variables:
      - group: frontend-secrets      
    steps:
    # 👉 프론트 .env 파일 생성
    - script: |
        echo REACT_APP_KAKAO_JS_KEY=$(REACT_APP_KAKAO_JS_KEY) > front\.env
        echo .env file created:
        type front\.env
      displayName: 'Create .env file for frontend build'
    - task: Docker@2
      displayName: Build and push Frontend image
      inputs:
        command: buildAndPush
        repository: frontend
        dockerfile: front/Dockerfile
        buildContext: front
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
          $(Build.BuildId)

  # 👉 k8s 디렉토리를 아티팩트로 업로드 (배포 단계에서 사용)
  - job: Publish_Manifests
    displayName: Publish k8s manifests
    pool:
      name: Default
    steps:
    - upload: k8s
      artifact: k8s-manifests

# =========================
# Deploy Stage
# =========================
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      name: Default
    environment: 'dnjsdn752APFM.apfm'
    strategy:
      runOnce:
        deploy:
          steps:
          # 🔹 1) imagePullSecret 생성
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: apfm
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          # 🔹 2) backend-secrets 생성
          - task: KubernetesManifest@0
            displayName: Create backend-secrets
            inputs:
              action: createSecret
              namespace: apfm
              secretName: backend-secrets
              secretType: generic 
              secretArguments: |
                --from-literal=ACCOUNT_KEY=$(ACCOUNT_KEY)
                --from-literal=ACCOUNT_NAME=$(ACCOUNT_NAME)
                --from-literal=ADMIN_EMAIL=$(ADMIN_EMAIL)
                --from-literal=ADMIN_PASSWORD=$(ADMIN_PASSWORD)
                --from-literal=CONNECTION_STRING=$(CONNECTION_STRING)
                --from-literal=CONTAINER_NAME=$(CONTAINER_NAME)
                --from-literal=MAIL_PASSWORD=$(MAIL_PASSWORD)
                --from-literal=MAIL_USERNAME=$(MAIL_USERNAME)
                --from-literal=REDIS_PASSWORD=$(REDIS_PASSWORD)
                --from-literal=SECRET_KEY=$(SECRET_KEY)

          # 🔹 3) 실제 배포
          - task: KubernetesManifest@0
            displayName: Deploy backend, frontend, fastapi, nginx
            inputs:
              action: deploy
              namespace: apfm 
              manifests: |
                $(Pipeline.Workspace)/k8s-manifests/backend-deploy.yaml
                $(Pipeline.Workspace)/k8s-manifests/front-deploy.yaml
                $(Pipeline.Workspace)/k8s-manifests/fastapi-deploy.yaml
                $(Pipeline.Workspace)/k8s-manifests/nginx-lb.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                backend=$(containerRegistry)/backend:$(Build.BuildId)
                frontend=$(containerRegistry)/frontend:$(Build.BuildId)
                # fastapi는 기존 이미지(apfmrg.azurecr.io/fastapi:latest) 그대로 사용
                # nginx는 Docker Hub 이미지 사용 → 매핑 불필요
