# ===============================
# Azure DevOps Pipeline for APFM
# 빌드 → ACR 푸시 → AKS 배포 (kubectl + SecureFile kubeconfig)
# Backend + Frontend Secrets 반영
# ===============================

trigger:
- main

resources:
- repo: self

variables:
# 🔹 두 개의 Variable Group을 불러옴
- group: apfmk              # backend 관련 값들 (SECRET_KEY 등)
- group: frontend-secrets   # frontend 관련 값들 (REACT_APP_KAKAO_JS_KEY)

- name: dockerRegistryServiceConnection
  value: '05c23959-ace4-4487-a73b-d09fe638aff7'
- name: containerRegistry
  value: 'apfmrg.azurecr.io'
- name: imagePullSecret
  value: 'apfmrgf81e-auth'
- name: namespace
  value: 'apfm'

stages:
# =========================
# Build Stage
# =========================
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build_Backend
    displayName: Build Backend
    pool:
      name: Default
    steps:
    - task: Docker@2
      displayName: Build and push Backend image
      inputs:
        command: buildAndPush
        repository: backend
        dockerfile: backend/Dockerfile
        buildContext: backend
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: latest

  - job: Build_Frontend
    displayName: Build Frontend
    pool:
      name: Default
    steps:
    - task: Docker@2
      displayName: Build and push Frontend image
      inputs:
        command: buildAndPush
        repository: frontend
        dockerfile: front/Dockerfile
        buildContext: front
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: latest

# =========================
# Deploy Stage
# =========================
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy_to_K8s
    displayName: Deploy to Kubernetes
    environment: 'apfm-aks'
    pool:
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          # 1️⃣ kubeconfig Secure file 다운로드
          - task: DownloadSecureFile@1
            name: kubeconfigFile
            inputs:
              secureFile: kubeconfig.yaml

          # 2️⃣ kubeconfig 환경 변수 설정
          - powershell: |
              Write-Output "Setting up kubeconfig..."
              $env:KUBECONFIG = "$(kubeconfigFile.secureFilePath)"
              kubectl get nodes
            displayName: "Setup kubeconfig"

          # 3️⃣ backend-secrets 생성/갱신
          - powershell: |
              Write-Host "Creating backend secrets..."
              kubectl delete secret backend-secrets -n $(namespace) --ignore-not-found
              kubectl create secret generic backend-secrets `
                --from-literal=SECRET_KEY="$env:SECRET_KEY" `
                --from-literal=ADMIN_EMAIL="$env:ADMIN_EMAIL" `
                --from-literal=ADMIN_PASSWORD="$env:ADMIN_PASSWORD" `
                --from-literal=REDIS_PASSWORD="$env:REDIS_PASSWORD" `
                --from-literal=ACCOUNT_KEY="$env:ACCOUNT_KEY" `
                --from-literal=ACCOUNT_NAME="$env:ACCOUNT_NAME" `
                --from-literal=CONNECTION_STRING="$env:CONNECTION_STRING" `
                --from-literal=CONTAINER_NAME="$env:CONTAINER_NAME" `
                --from-literal=MAIL_USERNAME="$env:MAIL_USERNAME" `
                --from-literal=MAIL_PASSWORD="$env:MAIL_PASSWORD" `
                -n $(namespace)
            displayName: "Create/Update backend secrets"

          # 4️⃣ frontend-secrets 생성/갱신
          - powershell: |
              Write-Host "Creating frontend secrets..."
              kubectl delete secret frontend-secrets -n $(namespace) --ignore-not-found
              kubectl create secret generic frontend-secrets `
                --from-literal=REACT_APP_KAKAO_JS_KEY="$env:REACT_APP_KAKAO_JS_KEY" `
                -n $(namespace)
            displayName: "Create/Update frontend secrets"

          # 5️⃣ Deployment/Service 배포 (파일명 맞춰 수정)
          - powershell: |
              kubectl apply -f k8s/backend-deploy.yaml -n $(namespace)
              kubectl apply -f k8s/front-deploy.yaml -n $(namespace)
              # kubectl apply -f k8s/fastapi-deploy.yaml -n $(namespace)
              # kubectl apply -f k8s/nginx-lb.yaml -n $(namespace)
            displayName: "Apply manifests"
