# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '05c23959-ace4-4487-a73b-d09fe638aff7'
  containerRegistry: 'apfmrg.azurecr.io'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'apfmrgf81e-auth'
  vmImageName: 'ubuntu-latest'

stages:
# =========================
# Build Stage
# =========================
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build_Backend
    displayName: Build Backend
    pool:
      name: Default
    steps:
    - task: Docker@2
      displayName: Build and push Backend image
      inputs:
        command: buildAndPush
        repository: dnjsdnapfm-backend
        dockerfile: backend/Dockerfile
        buildContext: backend
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

  - job: Build_Frontend
    displayName: Build Frontend
    pool:
      name: Default
    steps:
    - task: Docker@2
      displayName: Build and push Frontend image
      inputs:
        command: buildAndPush
        repository: dnjsdnapfm-frontend
        dockerfile: front/Dockerfile
        buildContext: front
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

  # - job: Build_Fastapi
  #   displayName: Build FastAPI
  #   pool:
  #     name: Default
  #   steps:
  #   - task: Docker@2
  #     displayName: Build and push FastAPI image
  #     inputs:
  #       command: buildAndPush
  #       repository: dnjsdnapfm-fastapi
  #       dockerfile: AI/Dockerfile
  #       buildContext: AI
  #       containerRegistry: $(dockerRegistryServiceConnection)
  #       tags: |
  #         $(tag)

  # 👉 manifests 디렉토리를 아티팩트로 업로드 (배포 단계에서 사용)
  - job: Publish_Manifests
    displayName: Publish manifests
    pool:
      name: Default
    steps:
    - upload: manifests
      artifact: manifests

# =========================
# Deploy Stage
# =========================
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      name: Default
    environment: 'dnjsdn752APFM.apfm'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy backend, frontend, fastapi
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/backend.yml
                $(Pipeline.Workspace)/manifests/frontend.yml
                $(Pipeline.Workspace)/manifests/fastapi.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                backend=$(containerRegistry)/dnjsdnapfm-backend:$(tag)
                frontend=$(containerRegistry)/dnjsdnapfm-frontend:$(tag)
                fastapi=apfmrg.azurecr.io/fastapi:latest