# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '05c23959-ace4-4487-a73b-d09fe638aff7'
  containerRegistry: 'apfmrg.azurecr.io'
  imagePullSecret: 'apfmrgf81e-auth'
  vmImageName: 'ubuntu-latest'

stages:
# =========================
# Build Stage
# =========================
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build_Backend
    displayName: Build Backend
    pool:
      name: Default
    steps:
    - task: Docker@2
      displayName: Build and push Backend image
      inputs:
        command: buildAndPush
        repository: dnjsdnapfm-backend
        dockerfile: backend/Dockerfile
        buildContext: backend
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
          $(Build.BuildId)

  - job: Build_Frontend
    displayName: Build Frontend
    pool:
      name: Default
    variables:
      - group: frontend-secrets      
    steps:
    # 👉 프론트 .env 파일 생성 (Windows CMD 호환)
    - script: |
        echo REACT_APP_KAKAO_JS_KEY=$(REACT_APP_KAKAO_JS_KEY) > front\.env
        echo .env file created:
        type front\.env
      displayName: 'Create .env file for frontend build'
    - task: Docker@2
      displayName: Build and push Frontend image
      inputs:
        command: buildAndPush
        repository: dnjsdnapfm-frontend
        dockerfile: front/Dockerfile
        buildContext: front
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
          $(Build.BuildId)

  # 👉 fastapi는 이미지 용량 크고 자주 안 바뀌므로 파이프라인 빌드/푸시 제외
  # - job: Build_Fastapi
  #   displayName: Build FastAPI
  #   pool:
  #     name: Default
  #   steps:
  #   - task: Docker@2
  #     displayName: Build and push FastAPI image
  #     inputs:
  #       command: buildAndPush
  #       repository: dnjsdnapfm-fastapi
  #       dockerfile: AI/Dockerfile
  #       buildContext: AI
  #       containerRegistry: $(dockerRegistryServiceConnection)
  #       tags: |
  #         latest
  #         $(Build.BuildId)

  # 👉 k8s 디렉토리를 아티팩트로 업로드 (배포 단계에서 사용)
  - job: Publish_Manifests
    displayName: Publish k8s manifests
    pool:
      name: Default
    steps:
    - upload: k8s
      artifact: k8s-manifests

# =========================
# Deploy Stage
# =========================
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      name: Default
    environment: 'dnjsdn752APFM.apfm'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: apfm
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: Deploy backend, frontend, fastapi, nginx
            inputs:
              action: deploy
              namespace: apfm 
              manifests: |
                $(Pipeline.Workspace)/k8s-manifests/backend-deploy.yaml
                $(Pipeline.Workspace)/k8s-manifests/front-deploy.yaml
                $(Pipeline.Workspace)/k8s-manifests/fastapi-deploy.yaml
                $(Pipeline.Workspace)/k8s-manifests/nginx-lb.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                backend=$(containerRegistry)/dnjsdnapfm-backend:$(Build.BuildId)
                frontend=$(containerRegistry)/dnjsdnapfm-frontend:$(Build.BuildId)
                # fastapi는 기존 이미지(apfmrg.azurecr.io/fastapi:latest) 그대로 사용
                # nginx는 Docker Hub 이미지 사용 → 매핑 불필요
